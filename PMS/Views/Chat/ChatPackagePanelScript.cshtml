<script type="text/javascript">
var db = firebase.firestore();
var quotationData = db.collection(`Quotation`).doc("@ViewBag.QuotationID");
var docData;
    var id;
    var i = 0;

quotationData.onSnapshot((doc) => {
    docData = doc.data();
    if (!docData.Packages) {
        docData.Packages = [];
    }

    CurrentEnquiries.List = docData.Packages;
    if (id) {
        loadPackageDetails();
    }

    @if (ViewBag.SelectedPackageID != null)
        {
            @:if (i == 0)
            @:{
            @:  initData();
            @: i++;
            @:}
        }
    });


var CurrentEnquiries = {
    SelectedPackage: "",
    List: [],
  ShowAddPackage: false,
};

var data = {
    CurrentEnquiries : this.CurrentEnquiries,
    CurrentPackage: '',
    showSummary: true,
    priceUnit: 'RM',
    manualItem: 1,
    prefixCharges: [],
    cartItems: [],
    venueItems: [],
    packageName: '',
    packagePrice: 0,
    packagePriceDeposit: 0,
    quantity: 0,
    chargeName: '',
    chargeNameCustom: '',
    pricePerUnit: 1,
    unit: '/KM',
    showAddChargeButton: true,
    venueDetails: null,
    venueDate: null,
    quoteStatus: null,
    jobUrl: '',
    jobId: '',
    studioUrl: '',
    option: '1',
    isDisabledPackage: false
}

function updateQuotationData() {
        var currentPackageIndex = docData.Packages.findIndex((obj) => {
            return obj.Package.Id == id;
        });

        data.CurrentPackage.Package.Name = data.packageName;
        data.CurrentPackage.Package.Price = data.packagePrice;
        data.CurrentPackage.Package.DepositPrice = data.packagePriceDeposit
        data.CurrentPackage.Charges = data.cartItems;
        data.CurrentPackage.Venues = data.venueItems;
        data.CurrentPackage.QuoteStatus = data.quoteStatus;

        docData.Packages[currentPackageIndex] = data.CurrentPackage;

        quotationData.update(docData);
}

    function loadPackageDetails() {
        data.isDisabledPackage = false;

        data.CurrentPackage = docData.Packages.find((obj) => {
            return obj.Package.Id == id;
        });

        data.packageName = data.CurrentPackage.Package.Name;
        data.packagePriceDeposit = data.CurrentPackage.Package.DepositPrice;
        data.packagePrice = data.CurrentPackage.Package.Price;
        if (data.CurrentPackage.Charges) {
            data.cartItems = data.CurrentPackage.Charges;
        }
        if (data.CurrentPackage.Venues) {
            data.venueItems = data.CurrentPackage.Venues;
        }
        data.quoteStatus = data.CurrentPackage.OrderStatus;
        if (data.CurrentPackage.OrderStatus.toLowerCase() != `quote`) {
            data.showAddChargeButton = false;
        }

        if (data.CurrentPackage.JobLink) {
            data.jobUrl = data.CurrentPackage.JobLink;
            data.jobId = data.CurrentPackage.JobID;
        }
        else {
            data.jobUrl = '';
        }

        if (data.CurrentPackage.JobID) {
            data.jobId = data.CurrentPackage.JobID;
        }
        else {
            data.jobId = '';
        }

        if (data.CurrentPackage.StudioUrl) {
            data.studioUrl = data.CurrentPackage.StudioUrl;
        }
        else {
            data.studioUrl = '';
        }

        if (data.CurrentPackage.Package.Status.toLowerCase() == "disabled") {
            data.isDisabledPackage = true;
        }
}

async function onAddNewPackage(isAdd) {
    if (isAdd) {
        if (!CurrentEnquiries.SelectedPackage) {
            alert("Please select a Package");
            return;
        }

        var checkPackage = docData.Packages.find((obj) => {
            return obj.Package.Id == CurrentEnquiries.SelectedPackage;
        });

        if (checkPackage != null) {
            alert('Package Already have Quotation in progress. Please Complete the Quote First');
            return;
        }

        var newPackage;
        await axios.get(
            "/SystemAPI/Package/GetPackageDetails?id=" +
            CurrentEnquiries.SelectedPackage
        ).then((res) => {
            var responseData = res.data;

            if (responseData.status == "disabled") {
                alert("Package is not available. Please select other package");
            }
            else {
                newPackage = {
                    Package: {
                        Id: responseData.id,
                        Name: responseData.name,
                        Price: responseData.price,
                        DepositPrice: responseData.depositprice,
                        Status: "Active",
                    },
                    OrderStatus: "quote",
                    Charges: [],
                    Venues: [],
                };
                docData.Packages.push(newPackage);
                quotationData.update({ Packages: docData.Packages });

                id = newPackage.Package.Id;
                loadPackageDetails();
                data.showSummary = false;
                data.showAddChargeButton = true;
            }
        });        
    }
    else {
        data.showSummary = true;
    }
    CurrentEnquiries.ShowAddPackage = !CurrentEnquiries.ShowAddPackage;
}

    function onClickPackageDetails(id) {
            this.id = id;
            loadPackageDetails();
        if (!data.isDisabledPackage) {
            data.showSummary = false;
        }
}

var packagePanel = new Vue({
  el: "#app",
  data: this.data,
  mounted() {
    $("#AddChargeCard").hide();
    $("#AddVenueCard").hide();

    const getDetails = {
      method: "GET",
      headers: { StudioCredential: "@ViewBag.StudioID" },
      url: "/SystemAPI/Package/GetPackageTemplate",
    };

    axios(getDetails).then((response) => {
      data.prefixCharges = response.data;
    });
  },
  computed: {
    totalPrice: () => {
      var total = data.pricePerUnit * data.quantity;
      return total;
    },
    totalPricePackage: () => {
      return (
        data.cartItems.reduce(
          (accumulator, currentValue) =>
            accumulator + (currentValue["TotalPrice"] || 0),
          0
        ) + data.packagePrice
      );
    },
  },
  filters: {
      priceFilter: (value) => {
          if (value) {
              return `${data.priceUnit}${value.toFixed(2)}`;
          }
          return '';
    },
      dateFilter: (value) => {
          if (isNaN(value.seconds)) {
              var date = new Date(value);
          }
          else {
              var date = new Date(value.seconds * 1000);
          }
      return date.toLocaleString("en-MY", { hour12: true });
    },
  },
  methods: {
    onClickPackageDetails: (id) => this.onClickPackageDetails(id),
    onAddNewPackage: (isAdd) => this.onAddNewPackage(isAdd),
    onAdd: (id) => {
      data.showAddChargeButton = !data.showAddChargeButton;

      if (!data.showAddChargeButton) {
        $(`#${id}`).slideDown();
      } else {
        $(`#${id}`).slideUp();
      }
    },
    onChargeSelectChange: () => {
      if (data.chargeName.id != 0) {
        var item = data.prefixCharges.find((x) => x.$id == data.chargeName.id);

        if (item.Price) data.pricePerUnit = item.Price;
        else data.pricePerUnit = 1;

        if (item.Unit) data.unit = `/${item.Unit}`;
        else data.unit = "";
      } else {
        data.pricePerUnit = 1;
        data.unit = "";
      }
    },
    onAddChargeSubmit() {
      var newCharge = {};

      if (!data.chargeName) {
        alert("Please Select Charge Name");
        return;
      }

      if (!data.quantity || data.quantity < 0) {
        alert("Quantity must have value");
        return;
      }

      if (data.chargeName.id == 0) {
        if (!data.chargeNameCustom) {
          alert("Please Enter Charge Name");
          return;
        }
        newCharge.Remarks = data.chargeNameCustom;
      } else {
        newCharge.Remarks = data.chargeName.value;
      }

      newCharge.PricePerUnit = data.pricePerUnit;
      newCharge.Unit = data.unit.trim();
      newCharge.Quantity = Number(data.quantity);
      newCharge.TotalPrice = this.totalPrice;
      data.cartItems.push(newCharge);
      updateQuotationData();

      data.showAddChargeButton = !data.showAddChargeButton;
      $("#AddChargeCard").slideUp();
    },
    onRemoveCharge(index) {
      data.cartItems.splice(index, 1);
      updateQuotationData();
    },
      onConfirmQuote: () => {
          if (data.venueItems.length <= 0) {
              alert('Please insert a Venue');
              return;
          }
      const axiosPost = {
        url: `/SystemAPI/Package/PostPackageQuote`,
          method: `POST`,
          data: { data: quotationData.id, package: id },
      };
      axios(axiosPost).then((response) => {
        data.showAddChargeButton = false;
      });
      },
    onCancelClick: () => {
      const axiosCancel = {
        url: `/SystemAPI/job/canceljob/${data.jobId}`,
          method: `GET`,
      };
        axios(axiosCancel).then((response) => {
            if (response) {
                window.location.href = "/";
            }
      });
    },
      onPayClick: () => {
          var TotalPrice = this.totalPrice;
          console.log(TotalPrice);
          if (data.option === '1') {
              window.location.href = `/${data.studioUrl}/job/createdepositinvoice/${data.jobId}`;
          }
          else {
              window.location.href = `/${data.studioUrl}/job/createfullinvoice/${data.jobId}`;
          }
      },
    onAddVenue: () => {
      if (!data.venueDetails) {
        alert("Please Fill in Venue Details");
        return;
      }

      if (!data.venueDate) {
        alert("Please fill in Date");
        return;
      }

      var d = new Date();
      d.setDate(d.getDate() + 1);
      d.setHours(0, 0, 0, 0);

      if (d.getTime() >= new Date(data.venueDate).getTime()) {
        alert("Date must be greater than today");
        return;
      }

      var newVenue = {
        Location: data.venueDetails,
        Date: new Date(data.venueDate),
      };
      data.venueItems.push(newVenue);
      updateQuotationData();

      data.showAddChargeButton = !data.showAddChargeButton;
      $("#AddVenueCard").slideUp();
    },
    onRemoveVenue(index) {
      data.venueItems.splice(index, 1);
      updateQuotationData();
      },
      onBackToList: () => {
          data.showSummary = true;
          CurrentEnquiries.ShowAddPackage = false;
      }
  },

});
</script>


@if (ViewBag.SelectedPackageID != null)
{
    <script type="text/javascript">
    async function initData() {
          try {
            await onClickPackageDetails(@ViewBag.SelectedPackageID);
        }
        catch {
            CurrentEnquiries.SelectedPackage = @ViewBag.SelectedPackageID;
            onAddNewPackage(true);
        }
    }
    </script>
}


