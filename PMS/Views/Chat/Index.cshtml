
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutStudioManage.cshtml";
}

<h2>Index</h2>

<div class="row bg-dark">
    <div class="col-12 ">
        @{
            Html.RenderPartial("StudioChatPackagePanel");
        }
    </div>

    <span id="newTime"></span>
</div>


@section Scripts{
    <script src="https://www.gstatic.com/firebasejs/8.2.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.2.1/firebase-firestore.js"></script>
    <script type="text/javascript">

        var docData;

        // Your web app's Firebase configuration
        var firebaseConfig = {
            apiKey: "AIzaSyCCQCiuqARWfqss6ksACWOYzvIPXVntFVc",
            authDomain: "photogw2.firebaseapp.com",
            databaseURL: "https://photogw2-default-rtdb.firebaseio.com",
            projectId: "photogw2",
            storageBucket: "photogw2.appspot.com",
            messagingSenderId: "316477798255",
            appId: "1:316477798255:web:93e0ce04b4148e4033da9a"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        var db = firebase.firestore();

        var quotationData = db.collection(`Quotation`).doc('@ViewBag.QuotationID');

        quotationData.onSnapshot(doc => {
            docData = doc.data();
            data.packageName = docData.Package.Name;
            data.packagePrice = docData.Package.Price;
            if (docData.Orders) { data.cartItems = docData.Orders; }
            if (docData.VenueDates) { data.venueItems = docData.VenueDates; }
            data.quoteStatus = docData.OrderStatus;

            if (data.quoteStatus != `quote`) {
                data.showAddChargeButton = false;
            }
        });

        var data = {
            packageName: '',
            packagePrice: 0,
            status: '',
            cartItems: new Array(),
            venueItems: new Array(),
            priceUnit: 'RM',
            manualItem: 1,
            prefixCharges: [],
            quantity: 0,
            chargeName: '',
            chargeNameCustom: '',
            pricePerUnit: 1,
            unit: '/KM',
            showAddChargeButton: true,
            venueDetails: null,
            venueDate: null,
            quoteStatus: null
        };

        var packagePanel = new Vue({
            el: '#app',
            data: this.data,
            mounted() {
                $('#AddChargeCard').hide();
                $('#AddVenueCard').hide();

                const getDetails = {
                    method: 'GET',
                    headers: { 'StudioCredential': '@ViewBag.StudioID' },
                    url: '/SystemAPI/Package/GetPackageTemplate'
                };

                axios(getDetails).then(response => {
                    data.prefixCharges = response.data;
                });
            }, computed: {
                totalPrice: () => {
                    var total = data.pricePerUnit * data.quantity;
                    return total;
                },
                totalPricePackage: () => {
                    return data.cartItems.reduce((accumulator, currentValue) => accumulator + (currentValue['TotalPrice'] || 0), 0) + data.packagePrice;
                }
            }, filters: {
                priceFilter: (value) => {
                    return `${data.priceUnit}${value.toFixed(2)}`;
                },
                dateFilter: (value) => {
                    var date = new Date(value.seconds * 1000);
                    return date.toLocaleString('en-MY', { hour12: true });                                       
                }
            }, methods: {
                onAdd: (id) => {
                    data.showAddChargeButton = !data.showAddChargeButton;

                    if (!data.showAddChargeButton) {
                        $(`#${id}`).slideDown();
                    }
                    else {
                        $(`#${id}`).slideUp();
                    }
                },
                onChargeSelectChange: () => {
                    if (data.chargeName.id != 0) {
                        var item = data.prefixCharges.find(x => x.$id == data.chargeName.id);

                        if (item.Price) data.pricePerUnit = item.Price;
                        else data.pricePerUnit = 1;

                        if (item.Unit) data.unit = `/${item.Unit}`;
                        else data.unit = '';
                    }
                    else {
                        data.pricePerUnit = 1;
                        data.unit = '';
                    }
                },
                onAddChargeSubmit() {
                    var newCharge = {};

                    if (!data.chargeName) {
                        alert('Please Select Charge Name');
                        return;
                    }

                    if (!data.quantity || data.quantity < 0) {
                        alert('Quantity must have value');
                        return;
                    }

                    if (data.chargeName.id == 0) {
                        if (!data.chargeNameCustom) {
                            alert('Please Enter Charge Name');
                            return;
                        }
                        newCharge.Remarks = data.chargeNameCustom;
                    }
                    else {
                        newCharge.Remarks = data.chargeName.value;
                    }

                    newCharge.PricePerUnit = data.pricePerUnit;
                    newCharge.Unit = data.unit.trim();
                    newCharge.Quantity = Number(data.quantity);
                    newCharge.TotalPrice = this.totalPrice;
                    data.cartItems.push(newCharge);

                    quotationData.update({
                        Orders: data.cartItems
                    });

                    data.showAddChargeButton = !data.showAddChargeButton;
                    $('#AddChargeCard').slideUp();
                }, onRemoveCharge(index) {
                    data.cartItems.splice(index, 1);
                    quotationData.update({
                        Orders: data.cartItems
                    });
                }, onConfirmQuote: () => {
                    const axiosPost = {
                        url: `/SystemAPI/Package/PostPackageQuote`,
                        method: `POST`,
                        data: { data: quotationData.id }
                    };
                    axios(axiosPost).then((response) => {
                        console.log(response);
                        data.showAddChargeButton = false;
                    });
                },
                onAddVenue: () => {
                    if (!data.venueDetails) {
                        alert('Please Fill in Venue Details');
                        return;
                    }

                    if (!data.venueDate) {
                        alert('Please fill in Date');
                        return;
                    }

                    var d = new Date();
                    d.setDate(d.getDate() + 1);
                    d.setHours(0, 0, 0, 0);

                    if (d.getTime() >= (new Date(data.venueDate).getTime())) {
                        alert('Date must be greater than today');
                        return;
                    }

                    var newVenue = {
                        Location: data.venueDetails,
                        Date: new Date(data.venueDate)
                    };
                    data.venueItems.push(newVenue);

                    quotationData.update({
                        VenueDates: data.venueItems
                    });

                    data.showAddChargeButton = !data.showAddChargeButton;
                    $('#AddVenueCard').slideUp();
                    
                }, onRemoveVenue(index) {
                    data.venueItems.splice(index, 1);
                    quotationData.update({
                        VenueDates: data.venueItems
                    });
                }
            }
        });
    </script>

}