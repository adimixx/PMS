@model PMS.Models.CreatePackageViewModel

@{
    Layout = "~/Views/Shared/_LayoutStudioManage.cshtml";

    if (Model.id == 0)
    {
        ViewBag.Title = "Add New Package - " + ViewBag.StudioName;
    }
    else
    {
        ViewBag.Title = "Edit Package - " + ViewBag.StudioName;
    }
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Package Form</h4>
            <hr />
            <div class="row">
                <div class="col-sm-12 col-md-8">
                    @if (TempData["error"] != null)
                    {
                        <div class="alert alert-danger" role="alert">
                            @TempData["error"]
                        </div>
                    }

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="form-group">
                        @Html.LabelFor(model => model.name)
                        @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control", maxlength = "50" } })
                        @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.price)
                        @Html.EditorFor(model => model.price, new { htmlAttributes = new { @class = "form-control", @min = "1", @type = "number" } })
                        @Html.ValidationMessageFor(model => model.price, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.depoprice)
                        @Html.EditorFor(model => model.depoprice, new { htmlAttributes = new { @class = "form-control", @min = "1", @type = "number" } })
                        @Html.ValidationMessageFor(model => model.depoprice, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.details)
                        @Html.EditorFor(model => model.details, new { htmlAttributes = new { @class = "form-control", maxlength = "100" } })
                        @Html.ValidationMessageFor(model => model.details, "", new { @class = "text-danger" })
                    </div>

                    @Html.HiddenFor(model => model.id)
                    @Html.HiddenFor(model => model.ImgName)
                    @Html.HiddenFor(model => model.studioid, new { @Value = ViewBag.StudioID })
                </div>

                <div class="col-sm-12 col-md-4 text-center">
                    <label class="font-weight-bold">Package Pictures</label>
                    <div style=" overflow-y: scroll;">
                        <div id="ProfilePic-Input" class="w-100 bg-soft-dark" style="height: 200px;">
                            <input type="file" id="input-profilepic" class="filepond" name="filepond" accept="" multiple />
                        </div>
                    </div>
                </div>

                <div class="col-12">
                    <div class="form-group">
                        <input type="submit" value="Save Package" class="btn btn-primary" onclick="submitForm(event)" />
                    </div>
                </div>
            </div>
        </div>
    </div>
}



@section Scripts{
    <script type="text/javascript">

    const inputElement = document.querySelector('input[type="file"]');
    const pond = FilePond.create(inputElement);

    FilePond.registerPlugin(
        FilePondPluginFileValidateType,
        FilePondPluginImageExifOrientation,
        FilePondPluginImagePreview,
        FilePondPluginImageCrop,
        FilePondPluginImageResize,
        FilePondPluginImageTransform,
        FilePondPluginImageEdit,
        FilePondPluginFilePoster,
        FilePondPluginFileEncode
    );

    FilePond.setOptions({
        server: {
            url: '/SystemAPI/PackageImage',
            process: {
                url: '/Upload',
                headers: {
                    'StudioCredential': @ViewBag.StudioID,
                    'Package': @Model.id
                }
            },
            revert: null,
            load: (source, load, error, progress, abort, headers) => {
                var myRequest = new Request(source);
                fetch(myRequest).then(function (response) {
                    response.blob().then(function (myBlob) {
                        load(myBlob)
                    });
                });
            },
            remove: (source, load, error) => {
                $('#ImgName').val('');
                load();

            }
        }
    });

    var inputPic = FilePond.create(
        document.getElementById('input-profilepic'),
        {
            labelIdle: `<span class="filepond--label-action">Browse</span> to Add Photos`,
            allowMultiple: false,
            imagePreviewHeight: 200,
            acceptedFileTypes: ['image/png', 'image/jpeg'],
            allowFileEncode: true,
            instantUpload: false,
            allowProcess: false,
            credits: false,
            dropValidation: true,
            dropOnPage: true,
            allowPaste: false,
            files: [
                @if (Model.images != null)
                {
                    foreach(var item in Model.images)
                    {
                        @:{
                        @:  source: "@String.Format("https://storagephotog2.blob.core.windows.net/studio-data/{0}/{1}", item.Package.studioid,item.ImageName)",
                        @:  // set type to local to indicate an already uploaded file
                        @:  options:
                        @:  {
                        @:      name : "@String.Format("https://storagephotog2.blob.core.windows.net/studio-data/{0}/{1}", item.Package.studioid,item.ImageName)",
                        @:      type: 'local',
                        @:      id: @item.ID
                        @:  }
                        @:},
                    }
                }
            ]
        });

        function submitForm(e) {
            e.preventDefault();
            inputPic.processFiles().then(response => {
                $('#ImgName').val(response[0].serverId.replace(/"/g, ""));
            }).finally(() => {
                $('form').submit();
            });
        };
    </script>

}